name: Deploy YC Stock Valuation System

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    name: 'Lint and Test'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: cd client && npm ci
      
    - name: Lint backend code
      run: npm run lint || echo "No lint script found"
      
    - name: Lint frontend code
      run: cd client && npm run lint || echo "No lint script found"
      
    - name: Run backend tests
      run: npm test || echo "No test script found"
      
    - name: Run frontend tests
      run: cd client && npm test -- --coverage --watchAll=false || echo "No test script found"
      
    - name: Build frontend
      run: cd client && npm run build
      
    - name: Test backend startup
      run: |
        timeout 30s npm start &
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1

  # 构建 Docker 镜像
  build-docker:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'
    name: 'Build Docker Image'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Heroku 部署
  deploy-heroku:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'
    name: 'Deploy to Heroku'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm ci
        cd client && npm ci && npm run build
        
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        buildpack: heroku/nodejs
        
    - name: Verify Heroku deployment
      run: |
        sleep 30
        curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/api/health

  # Vercel 部署
  deploy-vercel:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'
    name: 'Deploy to Vercel'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
      
    - name: Verify Vercel deployment
      run: |
        DEPLOYMENT_URL=$(cat deployment-url.txt)
        sleep 30
        curl -f "$DEPLOYMENT_URL/api/health"

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: 'Security Scan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=high || echo "Security vulnerabilities found"
        cd client && npm audit --audit-level=high || echo "Frontend security vulnerabilities found"
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-heroku, deploy-vercel]
    if: github.ref == 'refs/heads/main'
    name: 'Performance Test'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI failed"
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-heroku, deploy-vercel, performance-test]
    if: always()
    name: 'Notify Deployment Status'
    
    steps:
    - name: Notify deployment success
      if: ${{ needs.deploy-heroku.result == 'success' || needs.deploy-vercel.result == 'success' }}
      run: |
        echo "🎉 YC股票估值系统部署成功！"
        echo "Heroku: ${{ needs.deploy-heroku.result }}"
        echo "Vercel: ${{ needs.deploy-vercel.result }}"
        
    - name: Notify deployment failure
      if: ${{ needs.deploy-heroku.result == 'failure' || needs.deploy-vercel.result == 'failure' }}
      run: |
        echo "❌ YC股票估值系统部署失败"
        echo "Heroku: ${{ needs.deploy-heroku.result }}"
        echo "Vercel: ${{ needs.deploy-vercel.result }}"
        exit 1